/home/bhavika/anaconda2/bin/python /home/bhavika/PycharmProjects/JoyDivision/src/gridsearch_extratrees.py
<class 'pandas.core.frame.DataFrame'>
Index: 686 entries, 0 to 1116
Columns: 145 entries, File to Beats
dtypes: float64(126), int64(5), object(14)
memory usage: 782.5+ KB
None
Extra Trees grid search:
CV results {'rank_test_score': array([ 7,  5,  4,  3,  9,  8,  9,  6, 12,  1, 11,  2], dtype=int32), 'std_score_time': array([ 0.00177039,  0.00738026,  0.03660617,  0.05034329,  0.00151   ,
        0.01962498,  0.04472123,  0.03224144,  0.00560264,  0.01661632,
        0.03658998,  0.11898577]), 'split2_test_score': array([ 0.58394161,  0.65693431,  0.64963504,  0.66423358,  0.59124088,
        0.58394161,  0.67153285,  0.64963504,  0.56934307,  0.65693431,
        0.67883212,  0.64963504]), 'mean_fit_time': array([ 0.04946699,  0.23232322,  0.68109937,  3.07983584,  0.04896669,
        0.37815309,  0.60228543,  3.18251586,  0.070542  ,  0.33047538,
        0.65648613,  3.28269506]), 'split3_train_score': array([ 0.86520947,  0.88888889,  0.89435337,  0.90528233,  0.95628415,
        0.97449909,  0.99089253,  0.99271403,  0.99817851,  1.        ,
        1.        ,  1.        ]), 'std_test_score': array([ 0.03911432,  0.03052359,  0.0339756 ,  0.03743123,  0.0240791 ,
        0.01968673,  0.04435212,  0.02871144,  0.04667888,  0.0245452 ,
        0.04611333,  0.01376637]), 'params': ({'n_estimators': 10, 'max_depth': 7}, {'n_estimators': 50, 'max_depth': 7}, {'n_estimators': 100, 'max_depth': 7}, {'n_estimators': 500, 'max_depth': 7}, {'n_estimators': 10, 'max_depth': 10}, {'n_estimators': 50, 'max_depth': 10}, {'n_estimators': 100, 'max_depth': 10}, {'n_estimators': 500, 'max_depth': 10}, {'n_estimators': 10, 'max_depth': 15}, {'n_estimators': 50, 'max_depth': 15}, {'n_estimators': 100, 'max_depth': 15}, {'n_estimators': 500, 'max_depth': 15}), 'std_fit_time': array([ 0.00922011,  0.04206681,  0.16258704,  0.343391  ,  0.00185188,
        0.11216193,  0.0421555 ,  0.3334224 ,  0.02273856,  0.05228378,
        0.08909345,  0.23101647]), 'std_train_score': array([ 0.0230012 ,  0.00836452,  0.0125021 ,  0.00455789,  0.01462587,
        0.00557401,  0.00144991,  0.00211377,  0.00136521,  0.        ,
        0.        ,  0.        ]), 'split4_test_score': array([ 0.61029412,  0.56617647,  0.58823529,  0.58088235,  0.63235294,
        0.625     ,  0.57352941,  0.60294118,  0.55882353,  0.64705882,
        0.55882353,  0.61764706]), 'param_max_depth': masked_array(data = [7 7 7 7 10 10 10 10 15 15 15 15],
             mask = [False False False False False False False False False False False False],
       fill_value = ?)
, 'split1_train_score': array([ 0.87591241,  0.91058394,  0.91423358,  0.91423358,  0.97080292,
        0.98540146,  0.99452555,  0.99087591,  1.        ,  1.        ,
        1.        ,  1.        ]), 'split2_train_score': array([ 0.84699454,  0.90163934,  0.89981785,  0.90710383,  0.93078324,
        0.98724954,  0.99089253,  0.98907104,  0.99817851,  1.        ,
        1.        ,  1.        ]), 'split3_test_score': array([ 0.64233577,  0.62043796,  0.62773723,  0.6350365 ,  0.6350365 ,
        0.60583942,  0.62773723,  0.64963504,  0.67153285,  0.65693431,
        0.62773723,  0.62773723]), 'split4_train_score': array([ 0.83090909,  0.89090909,  0.92363636,  0.9       ,  0.95818182,
        0.99090909,  0.99090909,  0.98727273,  1.        ,  1.        ,
        1.        ,  1.        ]), 'mean_score_time': array([ 0.0111928 ,  0.04575944,  0.18026142,  0.54274116,  0.01037216,
        0.06458297,  0.1331738 ,  0.51966419,  0.01491156,  0.06052399,
        0.13323078,  0.70265903]), 'split0_train_score': array([ 0.8120438 ,  0.89051095,  0.89051095,  0.90693431,  0.97080292,
        0.98722628,  0.99270073,  0.99270073,  0.99635036,  1.        ,
        1.        ,  1.        ]), 'mean_train_score': array([ 0.84621386,  0.89650644,  0.90451042,  0.90671081,  0.95737101,
        0.98505709,  0.99198409,  0.99052689,  0.99854148,  1.        ,
        1.        ,  1.        ]), 'split0_test_score': array([ 0.55797101,  0.60869565,  0.57246377,  0.57246377,  0.60144928,
        0.5942029 ,  0.54347826,  0.58695652,  0.57246377,  0.60144928,
        0.57246377,  0.60869565]), 'mean_test_score': array([ 0.6122449 ,  0.6180758 ,  0.61953353,  0.62099125,  0.60641399,
        0.60932945,  0.60641399,  0.61516035,  0.58163265,  0.64723032,
        0.60058309,  0.62682216]), 'param_n_estimators': masked_array(data = [10 50 100 500 10 50 100 500 10 50 100 500],
             mask = [False False False False False False False False False False False False],
       fill_value = ?)
, 'split1_test_score': array([ 0.66666667,  0.63768116,  0.65942029,  0.65217391,  0.57246377,
        0.63768116,  0.61594203,  0.58695652,  0.53623188,  0.67391304,
        0.56521739,  0.63043478])}
Best Extra Trees ExtraTreesClassifier(bootstrap=False, class_weight=None, criterion='gini',
           max_depth=15, max_features='auto', max_leaf_nodes=None,
           min_impurity_split=1e-07, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=50, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False)
Best CV score for Extra Trees 0.6472303207
Best Extra Trees params: {'n_estimators': 50, 'max_depth': 15}
Finished in:  88.7340409756
Speech Dispatcher already running.

[Sat Dec 10 19:26:39 2016 : 833698] speechd: Speech Dispatcher 0.8 starting
[Sat Dec 10 19:26:39 2016 : 833833] speechd: Speech Dispatcher already running.


Process finished with exit code 0


MORE DATA

/home/bhavika/anaconda2/bin/python /home/bhavika/PycharmProjects/JoyDivision/src/gridsearch_extratrees.py
<class 'pandas.core.frame.DataFrame'>
Index: 4362 entries, 0 to 6387
Columns: 145 entries, File to Beats
dtypes: float64(126), int64(5), object(14)
memory usage: 4.9+ MB
None
Extra Trees grid search:
CV results {'rank_test_score': array([11,  9,  8,  7, 10,  6,  1,  4, 12,  3,  5,  2], dtype=int32), 'std_score_time': array([  2.25685955e-03,   2.44434287e-02,   1.57571081e-02,
         3.01818343e-02,   1.42476918e-03,   5.71697619e-03,
         2.03096233e-02,   4.66200652e-02,   4.64300276e-04,
         1.06751102e-02,   1.43976961e-02,   9.16194412e-01]), 'split2_test_score': array([ 0.7396789 ,  0.7190367 ,  0.72591743,  0.7293578 ,  0.72133028,
        0.73165138,  0.74655963,  0.73165138,  0.69151376,  0.75344037,
        0.72591743,  0.74197248]), 'mean_fit_time': array([ 0.07841225,  0.37287412,  0.70211358,  2.83924017,  0.08689485,
        0.27579298,  0.57412553,  2.86552095,  0.09995241,  0.40180464,
        0.69708037,  3.31690836]), 'split3_train_score': array([ 0.74498567,  0.77965616,  0.78825215,  0.79340974,  0.83810888,
        0.87421203,  0.87707736,  0.87965616,  0.96962751,  0.98137536,
        0.98796562,  0.98481375]), 'std_test_score': array([ 0.04245892,  0.04576259,  0.04103814,  0.04589727,  0.03618303,
        0.04916485,  0.04715776,  0.04969084,  0.04319443,  0.04679661,
        0.0460982 ,  0.04626261]), 'params': ({'n_estimators': 10, 'max_depth': 7}, {'n_estimators': 50, 'max_depth': 7}, {'n_estimators': 100, 'max_depth': 7}, {'n_estimators': 500, 'max_depth': 7}, {'n_estimators': 10, 'max_depth': 10}, {'n_estimators': 50, 'max_depth': 10}, {'n_estimators': 100, 'max_depth': 10}, {'n_estimators': 500, 'max_depth': 10}, {'n_estimators': 10, 'max_depth': 15}, {'n_estimators': 50, 'max_depth': 15}, {'n_estimators': 100, 'max_depth': 15}, {'n_estimators': 500, 'max_depth': 15}), 'std_fit_time': array([ 0.00142401,  0.09729848,  0.09341696,  0.25629696,  0.02533812,
        0.03837649,  0.08826929,  0.1986259 ,  0.01230086,  0.0655953 ,
        0.09030151,  0.43707186]), 'std_train_score': array([ 0.01197865,  0.00982236,  0.01147141,  0.00913687,  0.01293984,
        0.00616592,  0.00912178,  0.01006608,  0.00641481,  0.00236419,
        0.00187125,  0.00193091]), 'split4_test_score': array([ 0.73279817,  0.78325688,  0.77637615,  0.7809633 ,  0.76949541,
        0.78440367,  0.78899083,  0.78669725,  0.76605505,  0.79243119,
        0.78669725,  0.78784404]), 'param_max_depth': masked_array(data = [7 7 7 7 10 10 10 10 15 15 15 15],
             mask = [False False False False False False False False False False False False],
       fill_value = ?)
, 'split1_train_score': array([ 0.77328747,  0.79019776,  0.79191745,  0.79249069,  0.84838062,
        0.87933505,  0.88334766,  0.8822012 ,  0.96617942,  0.98423617,
        0.98538263,  0.98308971]), 'split2_train_score': array([ 0.7730659 ,  0.79169054,  0.79197708,  0.79283668,  0.85587393,
        0.87507163,  0.87621777,  0.88252149,  0.96532951,  0.98080229,
        0.98252149,  0.98194842]), 'split3_test_score': array([ 0.7190367 ,  0.75114679,  0.75114679,  0.76261468,  0.72477064,
        0.7706422 ,  0.76376147,  0.7706422 ,  0.72362385,  0.76376147,
        0.76490826,  0.76720183]), 'split4_train_score': array([ 0.75616046,  0.78510029,  0.78853868,  0.79083095,  0.86131805,
        0.8782235 ,  0.88194842,  0.87965616,  0.96475645,  0.98424069,
        0.98395415,  0.98424069]), 'mean_score_time': array([ 0.01342473,  0.06308322,  0.10542088,  0.44406366,  0.01005402,
        0.03562546,  0.08208709,  0.39239521,  0.01183519,  0.04681053,
        0.10121093,  0.85487285]), 'split0_train_score': array([ 0.77529378,  0.80882774,  0.81857266,  0.81513328,  0.87675552,
        0.89137289,  0.90140441,  0.90599026,  0.98194325,  0.98738894,
        0.98366294,  0.98767555]), 'mean_train_score': array([ 0.76455866,  0.7910945 ,  0.7958516 ,  0.79694026,  0.8560874 ,
        0.87964302,  0.88399913,  0.88600505,  0.96956723,  0.98360869,
        0.98469737,  0.98435363]), 'split0_test_score': array([ 0.6277205 ,  0.64719359,  0.65521191,  0.64948454,  0.65750286,
        0.64604811,  0.65406644,  0.64833906,  0.63573883,  0.65406644,
        0.65750286,  0.65635739]), 'mean_test_score': array([ 0.71137093,  0.72902338,  0.73062815,  0.73498395,  0.72122879,
        0.73796424,  0.74438331,  0.74094452,  0.70793214,  0.74277854,
        0.74071527,  0.74415406]), 'param_n_estimators': masked_array(data = [10 50 100 500 10 50 100 500 10 50 100 500],
             mask = [False False False False False False False False False False False False],
       fill_value = ?)
, 'split1_test_score': array([ 0.73768614,  0.74455899,  0.74455899,  0.75257732,  0.73310424,
        0.75715922,  0.76861397,  0.7674685 ,  0.72279496,  0.75028637,
        0.76861397,  0.7674685 ])}
Best Extra Trees ExtraTreesClassifier(bootstrap=False, class_weight=None, criterion='gini',
           max_depth=10, max_features='auto', max_leaf_nodes=None,
           min_impurity_split=1e-07, min_samples_leaf=1,
           min_samples_split=2, min_weight_fraction_leaf=0.0,
           n_estimators=100, n_jobs=1, oob_score=False, random_state=None,
           verbose=0, warm_start=False)
Best CV score for Extra Trees 0.744383310408
Best Extra Trees params: {'n_estimators': 100, 'max_depth': 10}
Finished in:  89.0330560207
[Sun Dec 11 03:40:53 2016 : 759465] speechd: Speech Dispatcher 0.8 starting
Speech Dispatcher already running.

[Sun Dec 11 03:40:53 2016 : 837223] speechd: Speech Dispatcher already running.


Process finished with exit code 0
